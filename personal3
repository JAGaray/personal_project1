OVERVIEW

For this lab, you will do some basic manipulations of data. For this, you will need to do some File I/O and use structs (along with other data structures already covered in other labs). 

TASKS 

The goal here is to keep track of population information about the countries of the world. 
Task 0:

First, we need to decide the appropriate data structure for storing the data. Your instructor has supplied you with a file (populations.csv), which is a simplified version of data sourced from the UN (a few countries with non-ASCII characters in their name were left out just in case your program has problems with those). Save the file to $PWD. 

The format of the file is as follows:

    Columns 1-5: populations (in 1000s) of country in 1950, 1970, 1990, 2010, 2015, respectively. Since the population is in 1000s, the number is a real number. 
    Column 6: Name of country.  

Thus, a suitable data structure might be:
  struct Country {
    string name;
    double pop1950;
    double pop1970;
    double pop1990;
    double pop2010;
    double pop2015
  };
  struct World {
    int     numCountries;
    Country countries[MAXCOUNTRIES];
  } myWorld;

You will change this data structure later.
Task 0:

Write a function to initialize myWorld to data read from the supplied data file. There are a few complications:

    Reading the populations is straightforward, and can be done using the standard file IO functions we covered in class (i.e., ">>" using an input stream). However, since the names of some countries contain spaces, we need to use getline instead of >> for the name field. Fortunately, the country is the final field so we can use ">>" to read the populations and then a getline to finish the line.
    You will need to input data until the end of file is reached. Recall that getline's return value is false if at end of file, so its easy to check for this.  

To check that you did this correctly, you may wish to use ddd to check the value of myWorld. 
Task 1:

Write a program that prints the countries with the 3 largest growth rates between 1950 and 2015. Also modify the World data structure to store the indices of these 3 countries so that the searching can be avoided in the future. One algorithm to do this is a 3 pass algorithm; a better algorithm might be to keep track of the 'top 3' and adjust these as you iterate through the data structure. Print out the results in the following format:

    The fastest growing country is XXXXX, which grew by XXXXX% between 1950 and 2015.
    The 2nd fastest growing country is XXXXX, which grew by XXXXX% between 1950 and 2015.
    The 3rd fastest growing country is XXXXX, which grew by XXXXX% between 1950 and 2015.

You may assume the precondition that there are at least 3 countries. 
Task 2:

Now we wish to find countries that had negative growth rates. Print the list of such countries in the following format:

    The following countries shrunk between 1950 and 2015:
    country 1
    ...
    country n

To do this efficiently, recall that you had computed the growth rates of all countries in the previous task. So, you should first modify the Country datatype to store the growth rate, and modify the previous code to save the computed growth rates of each country. Then, this task becomes simple (while staying efficient).

HAND IN

For full credit on this lab you should spread your program across multiple files, and also write a makefile. One suitable partitioning might be to put the structure definitions in a header file, the input routines in one file, and the task1 and task2 code in 2 files. 
